#!/usr/bin/env python
#
#    license-generator
#    Copyright (C) 2016  Walter Dolce <walterdolce@gmail.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
import pprint
import sys
import license_generator
from license_generator.agplv3_transliterator import AGPLv3Transliterator
from license_generator.apache2_transliterator import Apache2Transliterator
from license_generator.gplv3_transliterator import GPLv3Transliterator
from license_generator.lgplv3_transliterator import LGPLv3Transliterator
from license_generator.license_file_generator import LicenseFileGenerator
from license_generator.license_file_locator import LicenseFileLocator
from license_generator.mit_transliterator import MitTransliterator
from license_generator.mplv2_transliterator import MPLv2Transliterator
from license_generator.transliterable import Transliterable
from license_generator.unlicense_transliterator import UnlicenseTransliterator


def run_command(command):
    if command == 'help':
        print(license_generator.__usage_info__)
        exit(0)
    if command == 'version':
        print(license_generator.__version_info__)
        exit(0)
    if command == 'generate':
        transliterable = Transliterable(sys.argv[2])

        agplv3_transliterator = AGPLv3Transliterator()
        apache_transliterator = Apache2Transliterator()
        gplv3_transliterator = GPLv3Transliterator()
        lgplv3_transliterator = LGPLv3Transliterator()
        mit_transliterator = MitTransliterator()
        mplv2_transliterator = MPLv2Transliterator()
        unlicense_transliterator = UnlicenseTransliterator()

        mplv2_transliterator.set_successor(unlicense_transliterator)
        mit_transliterator.set_successor(mplv2_transliterator)
        lgplv3_transliterator.set_successor(mit_transliterator)
        gplv3_transliterator.set_successor(lgplv3_transliterator)
        apache_transliterator.set_successor(gplv3_transliterator)
        agplv3_transliterator.set_successor(apache_transliterator)

        transliterable = agplv3_transliterator.transliterate(transliterable)
        license_name = transliterable.get_transliterable()

        locator = LicenseFileLocator()
        license_path = locator.locate(license_name)

        generator = LicenseFileGenerator()
        generator.generate(license_path)


if __name__ == '__main__':
    try:
        if not len(sys.argv) > 1:
            run_command('help')

        run_command(sys.argv[1])
    finally:
        exception = sys.exc_info()
        if exception[1] is not None:
            print(exception[1])
            exit(1)

# TODO add scenario to verify failure of bin/license-generator when no license type parameter is passed
